name: .NET Desktop

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: windows-latest

    env:
      Solution_Name: ICT3101_Calculator.sln
      Test_Project_Path_NUnit: ICT3101_Calculator.UnitTests/ICT3101_Calculator.UnitTests.csproj
      Test_Project_Path_SpecFlow: SpecFlowCalculatorTests/SpecFlowCalculatorTests.csproj

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          6.0.x
          8.0.x

    - name: Restore dependencies
      run: dotnet restore ${{ env.Solution_Name }}

    - name: Build
      run: dotnet build ${{ env.Solution_Name }} --no-restore --configuration Release

    - name: NUnit Tests
      working-directory: ICT3101_Calculator.UnitTests/
      run: dotnet test --no-build --configuration Release --verbosity normal

    - name: SpecFlow Tests
      working-directory: SpecFlowCalculatorTests/
      run: dotnet test --no-build --configuration Release --verbosity normal

    # The following steps are commented out as they are not needed for console applications
    # They were part of the template for desktop/web applications
    
    # Decode the base 64 encoded pfx and save the Signing_Certificate
    # - name: Decode the pfx
    #   run: |
    #     $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
    #     $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
    #     [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
    
    # Create the app package by building and packaging the Windows Application Packaging project
    # - name: Create the app package
    #   run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
    #   env:
    #     Appx_Bundle: Always
    #     Appx_Bundle_Platforms: x86|x64
    #     Appx_Package_Build_Mode: StoreUpload
    #     Configuration: ${{ matrix.configuration }}
    
    # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
    # - name: Upload build artifacts
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: MSIX Package
    #     path: ${{ env.Wap_Project_Directory }}\AppPackages